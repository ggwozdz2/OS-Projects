diff -rupNEZbB OriginalSources/usr/include/minix/callnr.h Sources/usr/include/minix/callnr.h
--- OriginalSources/usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ Sources/usr/include/minix/callnr.h	2023-07-22 23:16:30.618258996 +0200
@@ -58,8 +58,11 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_WAIT_FOR_PARENT  (PM_BASE + 48)
+#define PM_WAIT_FOR_CHILD   (PM_BASE + 49)
+#define PM_WAIT_FOR_SIBLING (PM_BASE + 50)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		51	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB OriginalSources/usr/include/unistd.h Sources/usr/include/unistd.h
--- OriginalSources/usr/include/unistd.h	2014-09-14 11:00:42.000000000 +0200
+++ Sources/usr/include/unistd.h	2023-08-27 14:58:27.796822314 +0200
@@ -411,5 +411,9 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+void wait_for_parent(void);
+void wait_for_child(void);
+void wait_for_sibling(void);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB OriginalSources/usr/src/include/unistd.h Sources/usr/src/include/unistd.h
--- OriginalSources/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/include/unistd.h	2023-08-27 14:58:44.453059653 +0200
@@ -411,5 +411,9 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+void wait_for_parent(void);
+void wait_for_child(void);
+void wait_for_sibling(void);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/Makefile.inc Sources/usr/src/lib/libc/misc/Makefile.inc
--- OriginalSources/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/lib/libc/misc/Makefile.inc	2023-08-27 15:03:36.849153981 +0200
@@ -8,3 +8,6 @@ SRCS+=	initfini.c
 
 # for -fstack-protector
 SRCS+=	stack_protector.c
+
+# for wait functions
+SRCS+= wait_for.c
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/wait_for.c Sources/usr/src/lib/libc/misc/wait_for.c
--- OriginalSources/usr/src/lib/libc/misc/wait_for.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/lib/libc/misc/wait_for.c	2023-08-27 23:13:01.846877081 +0200
@@ -0,0 +1,34 @@
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <string.h>
+#include <minix/rs.h>
+
+void wait_for_parent(void)
+{
+    message m;
+    memset(&m, 0, sizeof(m));
+    endpoint_t pm_pt;
+    minix_rs_lookup("pm", &pm_pt);
+    (void)_syscall(pm_pt, PM_WAIT_FOR_PARENT, &m);
+}
+
+void wait_for_child(void)
+{
+    message m;
+    memset(&m, 0, sizeof(m));
+    endpoint_t pm_pt;
+    minix_rs_lookup("pm", &pm_pt);
+    (void)_syscall(pm_pt, PM_WAIT_FOR_CHILD, &m);
+}
+
+void wait_for_sibling(void)
+{
+    message m;
+    memset(&m, 0, sizeof(m));
+    endpoint_t pm_pt;
+    minix_rs_lookup("pm", &pm_pt);
+    (void)_syscall(pm_pt, PM_WAIT_FOR_SIBLING, &m);
+}
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/callnr.h Sources/usr/src/minix/include/minix/callnr.h
--- OriginalSources/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/callnr.h	2023-07-22 23:16:28.482204051 +0200
@@ -58,8 +58,11 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_WAIT_FOR_PARENT  (PM_BASE + 48)
+#define PM_WAIT_FOR_CHILD   (PM_BASE + 49)
+#define PM_WAIT_FOR_SIBLING (PM_BASE + 50)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		51	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/forkexit.c Sources/usr/src/minix/servers/pm/forkexit.c
--- OriginalSources/usr/src/minix/servers/pm/forkexit.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/forkexit.c	2023-08-28 20:58:55.459180917 +0200
@@ -85,6 +85,7 @@ int do_fork()
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
   rmc->mp_parent = who_p;			/* record child's parent */
+  rmc->waiting_type = NOT_WAITING; /* waiting type */
   if (!(rmc->mp_trace_flags & TO_TRACEFORK)) {
 	rmc->mp_tracer = NO_TRACER;		/* no tracer attached */
 	rmc->mp_trace_flags = 0;
@@ -187,6 +188,7 @@ int do_srv_fork()
 	rmc->mp_trace_flags = 0;
 	(void) sigemptyset(&rmc->mp_sigtrace);
   }
+  rmc->waiting_type = NOT_WAITING;
   /* inherit only these flags */
   rmc->mp_flags &= (IN_USE|PRIV_PROC|DELAY_CALL);
   rmc->mp_child_utime = 0;		/* reset administration */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/main.c Sources/usr/src/minix/servers/pm/main.c
--- OriginalSources/usr/src/minix/servers/pm/main.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/main.c	2023-08-28 20:59:33.275923211 +0200
@@ -211,7 +211,7 @@ static int sef_cb_init_fresh(int UNUSED(
 			rmp->mp_scheduler = NONE;
 			rmp->mp_nice = get_nice_value(SRV_Q);
 		}
-
+		rmp->waiting_type = NOT_WAITING;
 		/* Get kernel endpoint identifier. */
 		rmp->mp_endpoint = ip->endpoint;
 
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/mproc.h Sources/usr/src/minix/servers/pm/mproc.h
--- OriginalSources/usr/src/minix/servers/pm/mproc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/mproc.h	2023-08-28 21:59:16.896513361 +0200
@@ -70,6 +70,9 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+
+  char waiting_type;
+
 } mproc[NR_PROCS];
 
 /* Flag values */
@@ -92,4 +95,9 @@ EXTERN struct mproc {
 #define DELAY_CALL	0x20000	/* waiting for call before sending signal */
 #define TAINTED		0x40000 /* process is 'tainted' */
 
+#define NOT_WAITING 0
+#define WAITING_SIBLING 1
+#define WAITING_PARENT 2
+#define WAITING_CHILD 3
+
 #define MP_MAGIC	0xC0FFEE0
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/proto.h Sources/usr/src/minix/servers/pm/proto.h
--- OriginalSources/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/proto.h	2023-08-24 00:31:46.125429961 +0200
@@ -89,3 +89,7 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+int do_wait_for_parent(void);
+int do_wait_for_child(void);
+int do_wait_for_sibling(void);
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/signal.c Sources/usr/src/minix/servers/pm/signal.c
--- OriginalSources/usr/src/minix/servers/pm/signal.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/signal.c	2023-08-28 22:18:03.632404994 +0200
@@ -869,3 +869,75 @@ void vm_notify_sig_wrapper(endpoint_t ep
 	}
   }
 }
+
+/* Functions defined in signal.c in order to use static 
+	functions try_resume_proc() and stop_proc() */
+
+int do_wait_for_parent(void)
+{
+    mp->waiting_type = NOT_WAITING;
+    struct mproc *parent = &mproc[mp->mp_parent];
+    
+    /* check if parent is waiting */
+    if (parent->waiting_type == WAITING_PARENT)
+    {
+        parent->waiting_type = NOT_WAITING;
+		try_resume_proc(parent);
+		return OK;
+    }
+	
+	mp->waiting_type = WAITING_CHILD;
+	(void)stop_proc(mp, FALSE);
+	
+    return OK;
+}
+
+int do_wait_for_child(void)
+{
+    mp->waiting_type = NOT_WAITING;
+    for (int i = 0; i < NR_PROCS; i++)
+    {
+        struct mproc *rmp = &mproc[i];
+        // check parent of current process
+        if (rmp->mp_parent == who_p)
+        {
+            if (rmp->waiting_type == WAITING_CHILD)
+            {
+				rmp->waiting_type = NOT_WAITING;
+				try_resume_proc(rmp);
+				return OK;
+            }
+        }
+    }
+	mp->waiting_type = WAITING_PARENT;
+	(void)stop_proc(mp, FALSE);
+    return OK;
+}
+
+int do_wait_for_sibling(void)
+{
+    mp->waiting_type = NOT_WAITING;
+    int proc_nr = (int)(mp - mproc);
+    for (int i = 0; i < NR_PROCS; i++)
+    {
+        if (i == proc_nr)
+            continue;
+
+        struct mproc *rmp = &mproc[i];
+
+        // check parent of current process
+        if (rmp->mp_parent == mp->mp_parent)
+        {
+            if (rmp->waiting_type == WAITING_SIBLING)
+            {
+                rmp->waiting_type = NOT_WAITING;
+                try_resume_proc(rmp);
+                return OK;
+            }
+        }
+    }
+
+    mp->waiting_type = WAITING_SIBLING;
+    (void)stop_proc(mp, FALSE);
+    return OK;
+}
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/table.c Sources/usr/src/minix/servers/pm/table.c
--- OriginalSources/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/table.c	2023-08-24 00:22:41.121652656 +0200
@@ -58,5 +58,8 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_WAIT_FOR_PARENT) = do_wait_for_parent,
+	CALL(PM_WAIT_FOR_CHILD) = do_wait_for_child,
+	CALL(PM_WAIT_FOR_SIBLING) = do_wait_for_sibling
 };
